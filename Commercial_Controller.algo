'------DEFINITIONS------'
Battery: Can be ON or OFF
Columns: Can be ACTIVE or INACTIVE
Cage: Can be IDLE, LOADING, IN-SERVICE, or OOO (Out-of-order)
Doors: Can be OPEN or CLOSED
Floor: Destination served by the Cage
Direction: Can be UP or DOWN
Call Buttons: Can send a pickup request to the destination queue
Floor Buttons: Can send an add destination request to the destination queue
Door Open Button: Can request a delay to the close door timer
Door Close Button: Can request to close the door
Weight Sensor: Detects weight load of the current cage
Door Sensor: Can either be CLEAR or OBSTRUCTED
Col-1: Handles basements and main floor
Col-2: Handles main floor to 20
Col-3: Handles floor 21-40 + main floor
Col-4: Handles floor 41-60 + main floor

SEQUENCE Startup USING Battery
    IF Battery is ON SET Column TO ACTIVE
    FOR EACH door IN doors
        CALL close_door
    END FOR
    FOR EACH cage IN cages
        SET cage_status TO IDLE
    END FOR
END SEQUENCE

'------CALL BUTTONS------'
SEQUENCE request_pickup USING requested_direction AND requested_floor
    CALL locate_available_cage WITH requested_direction AND requested_floor RETURNING least_busy_cage
    CALL send_request WITH requested_floor AND least_busy_cage
END SEQUENCE

SEQUENCE call_button_pressed
    SET call_button TO ACTIVE 
    READ requested_direction AND requested_floor AND column_number
    CALL request_pickup WITH requested_direction AND requested_floor AND column_number
END SEQUENCE

'------FLOOR BUTTONS------'
SEQUENCE floor_button_pressed USING cage
    SET floor_button TO ACTIVE 
    READ requested_floor
    CALL send_request WITH requested_floor AND cage
END SEQUENCE

'------CAGE FINDER------'
SEQUENCE locate_available_cage USING requested_direction AND requested_floor AND column_number
    FOR EACH cage in column_number cages
        IF cage_status is IDLE
            SET least_busy_cage TO cage
            RETURN least_busy_cage
        END IF
        ELSE IF list_length of cage < list_length of least_busy_cage AND cage_direction = requested_direction
            SET least_busy_cage TO cage
        ELSE
            COMPUTE shortest cage length regardless of direction and set that cage as least_busy_cage
        END IF
        RETURN least_busy_cage
    END FOR
END SEQUENCE

'------REQUEST CAGE------'
SEQUENCE send_request USING least_busy_cage AND requested_floor
    ADD requested_floor TO requests_list
    CALL sort_list WITH requests_list RETURNING sorted_list
END SEQUENCE

SEQUENCE sort_list USING requests_list AND cage_direction
        IF cage_direction IS up THEN
            COMPUTE requests_list BY ASCENDING
        ELSE IF cage_direction IS down THEN
            COMPUTE requests_list BY DESCENDING
        END if
    SET requests_list TO sorted_list
    RETURN sorted_list
END SEQUENCE

'------DOORS------'
SEQUENCE open_door USING cage
    IF cage_status IS LOADING THEN
        OPEN doors
    END IF
    SET Timer TO 8 Seconds
    SET floor_button TO INACTIVE
    SET call_button TO INACTIVE
END SEQUENCE

SEQUENCE open_button_pressed
    IF cage_status IS NOT IN-SERVICE
        CALL open_door WITH cage
    END IF
END SEQUENCE

SEQUENCE close_door USING cage
    IF door_sensor_status IS CLEAR THEN
        CLOSE doors
        SET cage_status TO IN-SERVICE
    END IF
END SEQUENCE

SEQUENCE close_button_pressed
    IF cage_status IS LOADING AND Timer is at less than 5 seconds
        CALL close_door USING cage
    END IF
END SEQUENCE

'------CAGE MOVEMENT------'
SEQUENCE move_down USING cage AND requested_floor
    IF doors ARE NOT closed
        CALL close_door WITH cage
    END IF
    CALL move WITH cage
    REPEAT
        SET cage_floor TO cage_floor - 1
    UNTIL cage_floor IS requested_floor
    SET cage_status TO LOADING
    CALL open_door USING cage
END SEQUENCE

SEQUENCE move_up USING cage AND requested_floor
    IF doors ARE NOT closed
        CALL close_door WITH cage
    END IF
    CALL move WITH cage
    REPEAT
        SET cage_floor TO cage_floor + 1
    UNTIL cage_floor IS requested_floor
    SET cage_status TO LOADING
    CALL open_door USING cage
END SEQUENCE

'------CAGE MANAGER------'
SEQUENCE cage_manager USING cage AND direction AND sorted_list
    WHILE sorted_list IS NOT EMPTY
        READ requested_floor FROM sorted_list
            IF cage_floor IS requested_floor THEN
                CALL open_door WITH cage
            ELSE IF cage_floor IS > requested_floor THEN
                CALL move_down WITH cage AND requested_floor
            ELSE IF cage_floor IS < requested_floor THEN
                CALL move_up WITH cage AND requested_floor
            END IF
        END WHILE
    SET cage_status TO IDLE
END SEQUENCE

'------WEIGHT SENSOR------'
SEQUENCE detect_weight USING cage
READ weight FROM weight_sensor
    IF weight IS > max_weight
        CALL open_door UNTIL weight under limit
    END IF
END SEQUENCE

'------DISPLAY------'
SEQUENCE display
    FOR EACH cage IN cages
        PRINT current cage_floor ON outer_display
        PRINT current cage_floor ON inner_display
    END FOR
END SEQUENCE